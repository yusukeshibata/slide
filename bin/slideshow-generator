#!/usr/bin/env node

var path = require('path')
var fs = require('fs')
var jade = require('jade')
var argv = require('minimist')(process.argv.slice(2));
var marked = require('marked')
var async = require('async')
var request = require('request')
var fm = require('front-matter')
var _ = require('lodash')
var DataUri = require('datauri')

var build = function(body,input,opt,callback) {
	if(!opt) opt = {}
	var content = fm(body)
	var tokens = marked.lexer(content.body,{
		gfm: true,
		tables: true,
		breaks: true,
		pedantic: true,
		sanitize: true,
		smartLists: true,
		smartypants: true
	})
	var title = ''
	var pages = []
	tokens.forEach(function(token) {
		if(token.type==='heading') {
			pages.push({
				tokens:[]
			})
		}
		if(token.type==='heading' && token.depth === 1) {
			title = token.text
		}
		pages[pages.length-1].tokens.push(token)
	})
	async.each(pages,function(page,callback) {
		async.waterfall([
			// get resources
			function(callback) {
				if(opt.online) {
					callback(null,{})
					return
				}
				var dataqueue = {}
				var test = new marked.Renderer()
				test.image = function(href,title,text) {
					var check = href.match(/(^https?:)?.*(\.[^\.\?]+)(\?.+)?$/)
					dataqueue[href] = {
						remote:!!check[1],
						ext:check[2],
						url:check[1] ? href : path.resolve(input.dir,href)
					}
				}
				var tokens = _.cloneDeep(page.tokens)
				tokens.links = {}
				marked.parser(tokens,{ renderer:test })
				async.each(Object.keys(dataqueue),function(key,callback) {
					var data = dataqueue[key]
					if(data.remote) {
						request(data.url,function(err,res,body) {
							var datauri = new DataUri()
							datauri.format(data.ext, body)
							dataqueue[key] = datauri.content
							callback()
						})
					} else {
						DataUri.promise(data.url)
							.then(function(content) {
								dataqueue[key] = content
								callback()
							})
							.catch(function(err) {
								callback(err)
							})
					}
				},function(err) {
					callback(err,dataqueue)
				})
			},
			// generate html
			function(dataqueue,callback) {
				var renderer = new marked.Renderer()
				renderer.image = function(href,title,text) {
					var content = opt.online ? href : dataqueue[href]
					return `<img src="${content}" alt="${text}"/>`
				}
				tokens = _.cloneDeep(page.tokens)
				tokens.links = {}
				var html = marked.parser(tokens,{ renderer:renderer })
				delete page.tokens
				page.html = html
				callback()
			},
		],function(err) {
			callback(err)
		})
	},function(err) {
		callback(err,{
			attributes:content.attributes,
			title:title,
			pages:pages
		})
	})
}

var url = argv._[0]
if(!url) {
	console.error('File is not specified.')
	return
}

async.waterfall([
	// filepath
	function(callback) {
		if(url.match(/^https?:/)) {
			var filename = url.split('/').filter(function(c) {
				return c.length
			}).pop()
			var input = path.parse(filename)
			request(url,function(err,res,body) {
				callback(err,body,input)
			})
		} else {
			var input = path.parse(url)
			fs.readFile(url,'utf8',function(err,body) {
				callback(err,body,input)
			})
		}
	},
	//
	function(body,input,callback) {
		build(body,input,argv,function(err,data) {
			callback(err,data,input)
		})
	},
	function(data,input,callback) {
		var output = argv.output || argv.o || path.resolve(input.dir,input.name+'.html')
		var fn = jade.compileFile(__dirname+'/../src/index.jade')
		var html = fn({
			data:JSON.stringify(data),
			process:process
		})
		fs.writeFile(output,html,function(err) {
			callback(err,output)
		})
	},
],function(err,output) {
	if(err) {
		console.error(err)
		return
	}
	console.log('Output:',output)
})

